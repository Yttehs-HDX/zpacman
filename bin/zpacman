#!/bin/python3

import sys
import os
import shutil

HOME = os.path.expanduser("~")
ZPACMAN = f"{HOME}/.zpacman"
PLUGIN_CONF = f"{ZPACMAN}/plugins.zsh"
OH_MY_ZSH = f"{HOME}/.oh-my-zsh"
if not os.path.exists(OH_MY_ZSH):
    sys.exit(f"Please install oh my zsh first")
ZSH_OFFICIAL_PLUGIN = f"{OH_MY_ZSH}/plugins"
ZSH_CUSTOM_PLUGIN = f"{OH_MY_ZSH}/custom/plugins"

RED = '\033[91m'
YELLOW = '\033[93m'
GREEN = '\033[92m'
CYAN = '\033[96m'
RESET = '\033[0m'

class plugin():
    def __init__(self, name, url = ""):
        self.name = name
        self.url = url
        if url == "":
            self.dir = f"{ZSH_OFFICIAL_PLUGIN}/{name}"
        else:
            self.dir = f"{ZSH_CUSTOM_PLUGIN}/{name}"
    def install(self):
        # clone custom plugin
        if self.url == "":
            return
        if not os.path.exists(f"{ZSH_CUSTOM_PLUGIN}/{self.name}"):
            os.system(f"git clone --depth=1 {self.url} {ZSH_CUSTOM_PLUGIN}/{self.name}")

plugins = []

def is_plugin_installed(name):
    for plugin in plugins:
        if plugin.name == name:
            return True
    return False

def install_plugin(name, url = ""):
    if name.startswith("http"):
        name, url = name.split("/")[-1], name

    p = plugin(name, url)
    if not is_plugin_installed(name):
        plugins.append(p)
    else:
        print(f"{RED}Plugin '{name}' already installed{RESET}")
        sys.exit()
    if url == "":
        if not os.path.exists(f"{ZSH_OFFICIAL_PLUGIN}/{name}"):
            sys.exit(f"{RED}Plugin '{name}' not found{RESET}")
    else:
        p.install()
    print(f"{GREEN}Plugin '{name}' installed{RESET}")

def uninstall_plugin(name):
    plugin_dir = f"{ZSH_CUSTOM_PLUGIN}/{name}"
    if os.path.exists(plugin_dir):
        shutil.rmtree(plugin_dir)

    for plugin in plugins:
        if plugin.name == name:
            plugins.remove(plugin)
            print(f"{GREEN}Plugin '{name}' uninstalled{RESET}")
            return
    sys.exit(f"{RED}Plugin '{name}' not found{RESET}")

def get_plugin_info(name):
    plugin = next(filter(lambda x: x.name == name, plugins), None)
    if plugin == None:
        sys.exit(f"{RED}Plugin '{name}' not found{RESET}")
    if os.path.exists(f"{plugin.dir}/README.md"):
        os.system(f"less {plugin.dir}/README.md")
        sys.exit(0)
    else:
        sys.exit(f"{RED}No README.md found{RESET}")

def help():
    print(f"{CYAN}Usage:{RESET} zpacman install <name> [url]")
    print("       zpacman install <url>")
    print("       zpacman uninstall <name>")
    print("       zpacman list")
    print("       zpacman reload")
    sys.exit()

def unknown_command():
    print(f"{RED}Unknown command{RESET}")
    print(f"{CYAN}See 'zpacman help' for usage{RESET}")
    sys.exit(1)

def read_plugins():
    with open(PLUGIN_CONF, "r") as f:
        lines = f.readlines()[6:-1]
        for line in lines:
            line = line.strip()
            if line and not line.startswith("#"):
                name, _, url = line.partition("#")
                name = name.strip()
                url = url.strip()
                plugins.append(plugin(name, url))
    return plugins

def write_config():
    with open(PLUGIN_CONF, "w") as f:
        f.write("#\n")
        f.write("# plugins.zsh\n")
        f.write("# generated by zpacman, do not edit\n")
        f.write("#\n")
        f.write("\n")
        f.write("plugins=(\n")
        for plugin in plugins:
            f.write(f"\t{plugin.name}\t# {plugin.url}\n" if plugin.url else f"\t{plugin.name}\n")
        f.write(")\n")

def on_exit():
    plugins.sort(key = lambda x: x.name)
    write_config()
    print(f"{CYAN}Please restart zsh or use 'source ~/.zshrc' to apply changes{RESET}")

def main():
    read_plugins()

    if len(sys.argv) == 2:
        command = sys.argv[1]
        if command == "help":
            help()
        elif command == "list":
            for plugin in plugins:
                if plugin.url:
                    print(f"{plugin.name} {YELLOW}({plugin.url}){RESET}")
                else:
                    print(plugin.name)
            sys.exit()
        elif command == "reload":
            for plugin in plugins:
                plugin.install()
            on_exit()
            sys.exit()
        else:
            unknown_command()
    if len(sys.argv) < 3:
        unknown_command()

    command = sys.argv[1]
    name = sys.argv[2]
    url = sys.argv[3] if len(sys.argv) > 3 else ""

    if command == "install":
        install_plugin(name, url)
    elif command == "uninstall":
        uninstall_plugin(name)
    elif command == "info":
        get_plugin_info(name)
    elif command == "help":
        help()
    else:
        unknown_command()

    on_exit()

if __name__ == "__main__":
    main()
